{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nvar _this4 = this;\n\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { EventEmitter } from 'events';\nvar Appearance;\n\ntry {\n  ReactNativeAppearance = require.call(null, 'react-native-appearance');\n  Appearance = ReactNativeAppearance.Appearance;\n} catch (e) {}\n\nimport { getScreens } from \"./mixins/helpers\";\nimport { getSelectors } from \"./mixins/selectors\";\nimport getConstants from \"./constants\";\nimport getClassesText from \"./utilities/text\";\nimport getClassesBackground from \"./utilities/background\";\nimport getClassesFlex from \"./utilities/flex\";\nimport getClassesShadow from \"./utilities/shadow\";\nimport getClassesSizing from \"./utilities/sizing\";\nimport getClassesSpacing from \"./utilities/spacing\";\nimport getClassesBorders from \"./utilities/borders\";\nimport getClassesDisplay from \"./utilities/display\";\nimport getClassesOverflow from \"./utilities/overflow\";\nimport getClassesType from \"./type\";\nimport getClassesGrid from \"./grid\";\nimport getClassesAlerts from \"./alerts\";\nimport getClassesButtonGroup from \"./button-group\";\nimport getClassesButtons from \"./buttons\";\nimport getClassesForms from \"./forms\";\nimport getClassesCard from \"./card\";\nimport getClassesListGroup from \"./list-group\";\nimport getClassesToasts from \"./toasts\";\nimport getClassesModal from \"./modal\";\nimport getClassesProgress from \"./progress\";\nimport getClassesReboot from \"./reboot\";\nimport getClassesTables from \"./tables\";\nimport getClassesCode from \"./code\";\n\nvar BootstrapStyleSheet = function () {\n  function BootstrapStyleSheet() {\n    var _this = this;\n\n    var constants = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var classes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, BootstrapStyleSheet);\n\n    this._modules = [getSelectors, getClassesText, getClassesBackground, getClassesFlex, getClassesShadow, getClassesSizing, getClassesSpacing, getClassesBorders, getClassesDisplay, getClassesOverflow, getClassesType, getClassesGrid, getClassesAlerts, getClassesButtonGroup, getClassesButtons, getClassesForms, getClassesCard, getClassesListGroup, getClassesToasts, getClassesModal, getClassesProgress, getClassesReboot, getClassesTables, getClassesCode];\n\n    this.dimensionsWidth = function () {\n      return _this.DIMENSIONS_WIDTH;\n    };\n\n    this.dimensionsHeight = function () {\n      return _this.DIMENSIONS_HEIGHT;\n    };\n\n    this.dimensionsMax = function () {\n      return _this.DIMENSIONS_MAX;\n    };\n\n    this.orientationPortrait = function () {\n      return !!_this.ORIENTATION_PORTRAIT;\n    };\n\n    this.orientationLandscape = function () {\n      return !!_this.ORIENTATION_LANDSCAPE;\n    };\n\n    this.modeLight = function () {\n      return !!_this.MODE_LIGHT;\n    };\n\n    this.modeDark = function () {\n      return !!_this.MODE_DARK;\n    };\n\n    this._dimensions(Dimensions.get('window'));\n\n    this._constructorConstants(constants);\n\n    this._constructorClasses(classes);\n\n    this._dimensionsEventEmitter = new EventEmitter();\n    this._orientationEventEmitter = new EventEmitter();\n    Dimensions.addEventListener('change', function (allDimensions) {\n      var orientationLandscapeOld = _this.ORIENTATION_LANDSCAPE;\n\n      _this._dimensions(allDimensions.window);\n\n      _this._createConstants();\n\n      _this._createClasses();\n\n      _this._dimensionsEventEmitter.emit('change', allDimensions.window);\n\n      orientationLandscapeOld != _this.ORIENTATION_LANDSCAPE && _this._orientationEventEmitter.emit('change', allDimensions.window);\n    });\n    Appearance && Appearance.addChangeListener(function (_ref) {\n      var mode = _ref.colorScheme;\n\n      _this._appearance(mode);\n    });\n  }\n\n  _createClass(BootstrapStyleSheet, [{\n    key: \"create\",\n    value: function create() {\n      return this.styles;\n    }\n  }, {\n    key: \"addDimensionsListener\",\n    value: function addDimensionsListener(handler) {\n      this._dimensionsEventEmitter.addListener('change', handler);\n    }\n  }, {\n    key: \"removeDimensionsListener\",\n    value: function removeDimensionsListener(handler) {\n      this._dimensionsEventEmitter.removeListener('change', handler);\n    }\n  }, {\n    key: \"addOrientationListener\",\n    value: function addOrientationListener(handler) {\n      this._orientationEventEmitter.addListener('change', handler);\n    }\n  }, {\n    key: \"removeOrientationListener\",\n    value: function removeOrientationListener(handler) {\n      this._orientationEventEmitter.removeListener('change', handler);\n    }\n  }, {\n    key: \"addModeListener\",\n    value: function addModeListener(handler) {}\n  }, {\n    key: \"removeModeListener\",\n    value: function removeModeListener(handler) {}\n  }, {\n    key: \"_constructorConstants\",\n    value: function _constructorConstants(constants) {\n      this._constants = getConstants(constants);\n\n      this._createConstants();\n    }\n  }, {\n    key: \"_constructorClasses\",\n    value: function _constructorClasses(classes) {\n      var customModule = typeof classes == 'function' ? classes : function () {\n        return classes;\n      };\n\n      this._modules.push(customModule);\n\n      this._createClasses();\n    }\n  }, {\n    key: \"_createConstants\",\n    value: function _createConstants() {\n      var _this2 = this;\n\n      var _constants = this._constants;\n      var GRID_BREAKPOINTS_HORIZONTAL = _constants.GRID_BREAKPOINTS_HORIZONTAL,\n          GRID_BREAKPOINTS_VERTICAL = _constants.GRID_BREAKPOINTS_VERTICAL;\n      var DIMENSIONS_WIDTH = _constants._DIMENSIONS_WIDTH || this.DIMENSIONS_WIDTH;\n      var DIMENSIONS_HEIGHT = _constants._DIMENSIONS_HEIGHT || this.DIMENSIONS_HEIGHT;\n      var DIMENSIONS_MAX = _constants._DIMENSIONS_MAX || this.DIMENSIONS_MAX;\n      var ORIENTATION_PORTRAIT = _constants._ORIENTATION_PORTRAIT || this.ORIENTATION_PORTRAIT;\n      var ORIENTATION_LANDSCAPE = _constants._ORIENTATION_LANDSCAPE || this.ORIENTATION_LANDSCAPE;\n      var SCREENS_HORIZONTAL = _constants.SCREENS_HORIZONTAL || getScreens(GRID_BREAKPOINTS_HORIZONTAL, this.DIMENSIONS_WIDTH);\n      var SCREEN_HORIZONTAL = _constants.SCREEN_HORIZONTAL || SCREENS_HORIZONTAL.slice(-1).pop();\n      var SCREENS_VERTICAL = _constants.SCREENS_VERTICAL || getScreens(GRID_BREAKPOINTS_VERTICAL, this.DIMENSIONS_HEIGHT);\n      var SCREEN_VERTICAL = _constants.SCREEN_VERTICAL || SCREENS_VERTICAL.slice(-1).pop();\n      var SCREENS = SCREENS_HORIZONTAL;\n      var SCREENS_INFIXES = [''].concat(SCREENS);\n      var SCREEN = SCREEN_HORIZONTAL;\n      var MODE_LIGHT = this.MODE_LIGHT;\n      var MODE_DARK = this.MODE_DARK;\n      this.constants = _extends(this.constants || {}, _constants, {\n        DIMENSIONS_WIDTH: DIMENSIONS_WIDTH,\n        DIMENSIONS_HEIGHT: DIMENSIONS_HEIGHT,\n        DIMENSIONS_MAX: DIMENSIONS_MAX,\n        ORIENTATION_PORTRAIT: ORIENTATION_PORTRAIT,\n        ORIENTATION_LANDSCAPE: ORIENTATION_LANDSCAPE,\n        MODE_LIGHT: MODE_LIGHT,\n        MODE_DARK: MODE_DARK,\n        SCREENS_HORIZONTAL: SCREENS_HORIZONTAL,\n        SCREEN_HORIZONTAL: SCREEN_HORIZONTAL,\n        SCREENS_VERTICAL: SCREENS_VERTICAL,\n        SCREEN_VERTICAL: SCREEN_VERTICAL,\n        SCREENS: SCREENS,\n        SCREENS_INFIXES: SCREENS_INFIXES,\n        SCREEN: SCREEN\n      });\n      Object.keys(this.constants.GRID_BREAKPOINTS).forEach(function (item) {\n        var itemIndex = SCREENS.indexOf(item);\n        _this2.constants['SCREEN_UP_' + item.toUpperCase()] = itemIndex > -1;\n        _this2.constants['SCREEN_DOWN_' + item.toUpperCase()] = itemIndex == -1 || itemIndex == SCREENS.length - 1;\n        _this2.c = _this2.constants;\n      });\n    }\n  }, {\n    key: \"_createClasses\",\n    value: function _createClasses() {\n      var _this3 = this;\n\n      this._classes = {};\n\n      this._modules.forEach(function (itemGetClasses) {\n        _this3._classes = _extends(_this3._classes, itemGetClasses(_this3.constants, _this3._classes));\n      });\n\n      this.styles = _extends(this.styles || {}, StyleSheet.create(this._classes));\n      this.s = this.styles;\n    }\n  }, {\n    key: \"_dimensions\",\n    value: function _dimensions(dimensions) {\n      this.DIMENSIONS_WIDTH = dimensions.width;\n      this.DIMENSIONS_HEIGHT = dimensions.height;\n      this.DIMENSIONS_MAX = Math.max(dimensions.width, dimensions.height);\n      this.ORIENTATION_PORTRAIT = dimensions.height > dimensions.width;\n      this.ORIENTATION_LANDSCAPE = dimensions.width > dimensions.height;\n    }\n  }, {\n    key: \"_appearance\",\n    value: function _appearance(mode) {\n      this.MODE_LIGHT = mode == 'light';\n      this.MODE_DARK = mode == 'dark';\n    }\n  }], [{\n    key: \"_dimensions\",\n    value: function _dimensions(dimensions) {\n      this.DIMENSIONS_WIDTH = dimensions.width;\n      this.DIMENSIONS_HEIGHT = dimensions.height;\n      this.DIMENSIONS_MAX = Math.max(dimensions.width, dimensions.height);\n      this.ORIENTATION_PORTRAIT = dimensions.height > dimensions.width;\n      this.ORIENTATION_LANDSCAPE = dimensions.width > dimensions.height;\n    }\n  }, {\n    key: \"_appearance\",\n    value: function _appearance(mode) {\n      this.MODE_LIGHT = mode == 'light';\n      this.MODE_DARK = mode == 'dark';\n    }\n  }]);\n\n  return BootstrapStyleSheet;\n}();\n\nDimensions.addEventListener('change', function (allDimensions) {\n  BootstrapStyleSheet._dimensions(allDimensions.window);\n});\n\nBootstrapStyleSheet._dimensions(Dimensions.get('window'));\n\nAppearance && Appearance.addChangeListener(function (_ref2) {\n  var mode = _ref2.colorScheme;\n\n  _this4._appearance(mode);\n});\nAppearance && BootstrapStyleSheet._appearance(Appearance.getColorScheme());\nexport default BootstrapStyleSheet;","map":{"version":3,"sources":["/Users/ashish/Downloads/covid kunal/node_modules/react-native-bootstrap-styles/src/index.js"],"names":["EventEmitter","Appearance","ReactNativeAppearance","require","call","e","getScreens","getSelectors","getConstants","getClassesText","getClassesBackground","getClassesFlex","getClassesShadow","getClassesSizing","getClassesSpacing","getClassesBorders","getClassesDisplay","getClassesOverflow","getClassesType","getClassesGrid","getClassesAlerts","getClassesButtonGroup","getClassesButtons","getClassesForms","getClassesCard","getClassesListGroup","getClassesToasts","getClassesModal","getClassesProgress","getClassesReboot","getClassesTables","getClassesCode","BootstrapStyleSheet","constants","classes","_modules","dimensionsWidth","DIMENSIONS_WIDTH","dimensionsHeight","DIMENSIONS_HEIGHT","dimensionsMax","DIMENSIONS_MAX","orientationPortrait","ORIENTATION_PORTRAIT","orientationLandscape","ORIENTATION_LANDSCAPE","modeLight","MODE_LIGHT","modeDark","MODE_DARK","_dimensions","Dimensions","get","_constructorConstants","_constructorClasses","_dimensionsEventEmitter","_orientationEventEmitter","addEventListener","allDimensions","orientationLandscapeOld","window","_createConstants","_createClasses","emit","addChangeListener","mode","colorScheme","_appearance","styles","handler","addListener","removeListener","_constants","customModule","push","GRID_BREAKPOINTS_HORIZONTAL","GRID_BREAKPOINTS_VERTICAL","_DIMENSIONS_WIDTH","_DIMENSIONS_HEIGHT","_DIMENSIONS_MAX","_ORIENTATION_PORTRAIT","_ORIENTATION_LANDSCAPE","SCREENS_HORIZONTAL","SCREEN_HORIZONTAL","slice","pop","SCREENS_VERTICAL","SCREEN_VERTICAL","SCREENS","SCREENS_INFIXES","concat","SCREEN","Object","keys","GRID_BREAKPOINTS","forEach","item","itemIndex","indexOf","toUpperCase","length","c","_classes","itemGetClasses","StyleSheet","create","s","dimensions","width","height","Math","max","getColorScheme"],"mappings":"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","sourcesContent":["import { StyleSheet, Dimensions } from 'react-native';\nimport { EventEmitter } from 'events';\n\n// experimental\nlet Appearance;\n\n// TODO: make it work for Expo, etc\ntry {\n  ReactNativeAppearance = require.call(null, 'react-native-appearance');\n  Appearance = ReactNativeAppearance.Appearance;\n} catch (e) {\n  // no dark/light mode listener\n}\n\nimport { getScreens } from './mixins/helpers';\nimport { getSelectors } from './mixins/selectors';\nimport getConstants from './constants';\n\nimport getClassesText from './utilities/text';\nimport getClassesBackground from './utilities/background';\nimport getClassesFlex from './utilities/flex';\nimport getClassesShadow from './utilities/shadow';\nimport getClassesSizing from './utilities/sizing';\nimport getClassesSpacing from './utilities/spacing';\nimport getClassesBorders from './utilities/borders';\nimport getClassesDisplay from './utilities/display';\nimport getClassesOverflow from './utilities/overflow';\n\nimport getClassesType from './type';\nimport getClassesGrid from './grid';\nimport getClassesAlerts from './alerts';\nimport getClassesButtonGroup from './button-group';\nimport getClassesButtons from './buttons';\nimport getClassesForms from './forms';\nimport getClassesCard from './card';\nimport getClassesListGroup from './list-group';\nimport getClassesToasts from './toasts';\nimport getClassesModal from './modal';\nimport getClassesProgress from './progress';\nimport getClassesReboot from './reboot';\nimport getClassesTables from './tables';\nimport getClassesCode from './code';\n\nclass BootstrapStyleSheet {\n\n  static DIMENSIONS_WIDTH;\n  static DIMENSIONS_HEIGHT;\n  static DIMENSIONS_MAX;\n  static ORIENTATION_PORTRAIT;\n  static ORIENTATION_LANDSCAPE;\n  static MODE_LIGHT;\n  static MODE_DARK;\n\n  constants;\n  classes;\n  styles;\n\n  _modules = [\n    getSelectors,\n\n    getClassesText,\n    getClassesBackground,\n    getClassesFlex,\n    getClassesShadow,\n    getClassesSizing,\n    getClassesSpacing,\n    getClassesBorders,\n    getClassesDisplay,\n    getClassesOverflow,\n\n    getClassesType,\n    getClassesGrid,\n    getClassesAlerts,\n    getClassesButtonGroup,\n    getClassesButtons,\n    getClassesForms,\n    getClassesCard,\n    getClassesListGroup,\n    getClassesToasts,\n    getClassesModal,\n    getClassesProgress,\n    getClassesReboot,\n    getClassesTables,\n    getClassesCode,\n  ]\n\n  // TODO: test \"mode\" (light/dark)\n  constructor(constants = {}, classes = {}) {\n    this._dimensions(Dimensions.get('window'));\n    this._constructorConstants(constants);\n    this._constructorClasses(classes);\n\n    // experimental\n    this._dimensionsEventEmitter = new EventEmitter();\n    this._orientationEventEmitter = new EventEmitter();\n    // this._modeEventEmitter = new EventEmitter();\n\n    // update dimensions on change\n    Dimensions.addEventListener('change', (allDimensions) => {\n      const orientationLandscapeOld = this.ORIENTATION_LANDSCAPE;\n\n      this._dimensions(allDimensions.window);\n      this._createConstants();\n      this._createClasses();\n\n      this._dimensionsEventEmitter.emit('change', allDimensions.window);\n      orientationLandscapeOld != this.ORIENTATION_LANDSCAPE &&\n        this._orientationEventEmitter.emit('change', allDimensions.window); // or what?\n    });\n\n    // update mode on change\n    Appearance && Appearance.addChangeListener(({colorScheme: mode}) => {\n      this._appearance(mode);\n    });\n  }\n\n  // DEPRECATED\n  create() {\n    return this.styles;\n  }\n\n  addDimensionsListener(handler) {\n    this._dimensionsEventEmitter.addListener('change', handler);\n  }\n\n  removeDimensionsListener(handler) {\n    this._dimensionsEventEmitter.removeListener('change', handler);\n  }\n\n  addOrientationListener(handler) {\n    this._orientationEventEmitter.addListener('change', handler);\n  }\n\n  removeOrientationListener(handler) {\n    this._orientationEventEmitter.removeListener('change', handler);\n  }\n\n  addModeListener(handler) {\n    // TODO\n    // this._modeEventEmitter.addListener('change', handler);\n  }\n\n  removeModeListener(handler) {\n    // TODO\n    // this._modeEventEmitter.removeListener('change', handler);\n  }\n\n  dimensionsWidth = () => this.DIMENSIONS_WIDTH\n  dimensionsHeight = () => this.DIMENSIONS_HEIGHT\n  dimensionsMax = () => this.DIMENSIONS_MAX\n  orientationPortrait = () => !!this.ORIENTATION_PORTRAIT\n  orientationLandscape = () => !!this.ORIENTATION_LANDSCAPE\n  modeLight = () => !!this.MODE_LIGHT\n  modeDark = () => !!this.MODE_DARK\n\n  _constructorConstants(constants) {\n    this._constants = getConstants(constants);\n    this._createConstants();\n  }\n\n  _constructorClasses(classes) {\n    const customModule = typeof classes == 'function' ? classes : () => classes;\n    this._modules.push(customModule);\n    this._createClasses();\n  }\n\n  _createConstants() {\n    const _constants = this._constants;\n    const { GRID_BREAKPOINTS_HORIZONTAL, GRID_BREAKPOINTS_VERTICAL } = _constants;\n\n    const DIMENSIONS_WIDTH = _constants._DIMENSIONS_WIDTH || this.DIMENSIONS_WIDTH;\n    const DIMENSIONS_HEIGHT = _constants._DIMENSIONS_HEIGHT || this.DIMENSIONS_HEIGHT;\n    const DIMENSIONS_MAX = _constants._DIMENSIONS_MAX || this.DIMENSIONS_MAX;\n    const ORIENTATION_PORTRAIT = _constants._ORIENTATION_PORTRAIT || this.ORIENTATION_PORTRAIT;\n    const ORIENTATION_LANDSCAPE = _constants._ORIENTATION_LANDSCAPE || this.ORIENTATION_LANDSCAPE;\n\n    const SCREENS_HORIZONTAL = _constants.SCREENS_HORIZONTAL || getScreens(GRID_BREAKPOINTS_HORIZONTAL, this.DIMENSIONS_WIDTH);\n    const SCREEN_HORIZONTAL = _constants.SCREEN_HORIZONTAL || SCREENS_HORIZONTAL.slice(-1).pop();\n    // const SCREENS_HORIZONTAL_INFIXES = [''].concat(SCREENS_HORIZONTAL), // infixes\n    const SCREENS_VERTICAL = _constants.SCREENS_VERTICAL || getScreens(GRID_BREAKPOINTS_VERTICAL, this.DIMENSIONS_HEIGHT);\n    const SCREEN_VERTICAL = _constants.SCREEN_VERTICAL || SCREENS_VERTICAL.slice(-1).pop();\n    // const SCREENS_VERTICAL_INFIXES = [''].concat(SCREENS_VERTICAL), // infixes\n    const SCREENS = SCREENS_HORIZONTAL;\n    const SCREENS_INFIXES = [''].concat(SCREENS);\n    const SCREEN = SCREEN_HORIZONTAL;\n\n    const MODE_LIGHT = this.MODE_LIGHT;\n    const MODE_DARK = this.MODE_DARK;\n\n    // preserve initially created object\n    this.constants = Object.assign(this.constants || {}, _constants, {\n      DIMENSIONS_WIDTH,\n      DIMENSIONS_HEIGHT,\n      DIMENSIONS_MAX,\n      ORIENTATION_PORTRAIT,\n      ORIENTATION_LANDSCAPE,\n      MODE_LIGHT,\n      MODE_DARK,\n      SCREENS_HORIZONTAL,\n      SCREEN_HORIZONTAL,\n      SCREENS_VERTICAL,\n      SCREEN_VERTICAL,\n      SCREENS,\n      SCREENS_INFIXES,\n      SCREEN,\n   });\n\n    // experimental\n    Object.keys(this.constants.GRID_BREAKPOINTS).forEach(item => {\n      const itemIndex = SCREENS.indexOf(item);\n      this.constants['SCREEN_UP_' + item.toUpperCase()] = itemIndex > -1;\n      this.constants['SCREEN_DOWN_' + item.toUpperCase()] = itemIndex == -1 || itemIndex == SCREENS.length - 1;\n      this.c = this.constants;\n    });\n  }\n\n  _createClasses() {\n    this._classes = {};\n\n    this._modules.forEach(itemGetClasses => {\n      this._classes = Object.assign(\n        this._classes,\n        itemGetClasses(this.constants, this._classes),\n      );\n    });\n\n    // preserve initially created object\n    this.styles = Object.assign(this.styles || {},\n      StyleSheet.create(this._classes),\n    );\n    this.s = this.styles;\n  }\n\n  _dimensions(dimensions) {\n    this.DIMENSIONS_WIDTH = dimensions.width;\n    this.DIMENSIONS_HEIGHT = dimensions.height;\n    this.DIMENSIONS_MAX = Math.max(dimensions.width, dimensions.height);\n\n    this.ORIENTATION_PORTRAIT = dimensions.height > dimensions.width;\n    this.ORIENTATION_LANDSCAPE = dimensions.width > dimensions.height;\n  }\n\n  // experimental\n  static _dimensions(dimensions) {\n    this.DIMENSIONS_WIDTH = dimensions.width;\n    this.DIMENSIONS_HEIGHT = dimensions.height;\n    this.DIMENSIONS_MAX = Math.max(dimensions.width, dimensions.height);\n\n    this.ORIENTATION_PORTRAIT = dimensions.height > dimensions.width;\n    this.ORIENTATION_LANDSCAPE = dimensions.width > dimensions.height;\n  }\n\n  _appearance(mode) {\n    this.MODE_LIGHT = mode == 'light';\n    this.MODE_DARK = mode == 'dark';\n  }\n\n  // experimental\n  static _appearance(mode) {\n    this.MODE_LIGHT = mode == 'light';\n    this.MODE_DARK = mode == 'dark';\n  }\n}\n\n// set dimensions for the class on changes\nDimensions.addEventListener('change', allDimensions => {\n BootstrapStyleSheet._dimensions(allDimensions.window);\n});\n\n// set dimensions for the class\nBootstrapStyleSheet._dimensions(Dimensions.get('window'));\n\n// set mode for the class on changes\nAppearance && Appearance.addChangeListener(({colorScheme: mode}) => {\n  this._appearance(mode);\n});\n\n// set mode for the class\nAppearance && BootstrapStyleSheet._appearance(Appearance.getColorScheme());\n\nexport default BootstrapStyleSheet;\n"]},"metadata":{},"sourceType":"module"}