{"ast":null,"code":"import Color from 'color';\nexport var getDefined = function getDefined(v, d) {\n  return v === undefined ? d : v;\n};\nexport var getScreens = function getScreens(breakpoints, size) {\n  return Object.keys(breakpoints).sort(function (a, b) {\n    return breakpoints[a] > breakpoints[b] ? 1 : -1;\n  }).map(function (item) {\n    return [item, breakpoints[item]];\n  }).filter(function (item) {\n    return item[1] <= size;\n  }).map(function (item) {\n    return item[0];\n  });\n};\nexport var colorYiq = function colorYiq(constants, color, dark, light) {\n  var c = Color(color);\n  var YIG_CONTRASTED_THRESHOLD = constants.YIG_CONTRASTED_THRESHOLD,\n      YIG_TEXT_DARK = constants.YIG_TEXT_DARK,\n      YIG_TEXT_LIGHT = constants.YIG_TEXT_LIGHT;\n  var yiq = (c.red() * 299 + c.green() * 587 + c.blue() * 114) / 1000;\n  return yiq >= YIG_CONTRASTED_THRESHOLD ? dark || YIG_TEXT_DARK : light || YIG_TEXT_LIGHT;\n};\nexport var colorLevel = function colorLevel(constants, color) {\n  var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  return Color(color || constants.PRIMARY).mix(Color(level > 0 ? constants.BLACK : constants.WHITE), Math.abs(level) * constants.THEME_COLOR_INTERVAL).hex();\n};","map":{"version":3,"sources":["/Users/ashish/Downloads/covid kunal/node_modules/react-native-bootstrap-styles/src/mixins/helpers.js"],"names":["Color","getDefined","v","d","undefined","getScreens","breakpoints","size","Object","keys","sort","a","b","map","item","filter","colorYiq","constants","color","dark","light","c","YIG_CONTRASTED_THRESHOLD","YIG_TEXT_DARK","YIG_TEXT_LIGHT","yiq","red","green","blue","colorLevel","level","PRIMARY","mix","BLACK","WHITE","Math","abs","THEME_COLOR_INTERVAL","hex"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAIA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,CAAD,EAAIC,CAAJ;AAAA,SAAUD,CAAC,KAAKE,SAAN,GAAkBD,CAAlB,GAAsBD,CAAhC;AAAA,CAAnB;AAEP,OAAO,IAAMG,UAAU,GAAG,SAAbA,UAAa,CAACC,WAAD,EAAcC,IAAd;AAAA,SAExBC,MAAM,CAACC,IAAP,CAAYH,WAAZ,EACGI,IADH,CACQ,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAWN,WAAW,CAACK,CAAD,CAAX,GAAiBL,WAAW,CAACM,CAAD,CAA5B,GAAkC,CAAlC,GAAsC,CAAC,CAAlD;AAAA,GADR,EAEGC,GAFH,CAEO,UAAAC,IAAI;AAAA,WAAI,CAACA,IAAD,EAAOR,WAAW,CAACQ,IAAD,CAAlB,CAAJ;AAAA,GAFX,EAGGC,MAHH,CAGU,UAAAD,IAAI;AAAA,WAAIA,IAAI,CAAC,CAAD,CAAJ,IAAWP,IAAf;AAAA,GAHd,EAIGM,GAJH,CAIO,UAAAC,IAAI;AAAA,WAAIA,IAAI,CAAC,CAAD,CAAR;AAAA,GAJX,CAFwB;AAAA,CAAnB;AASP,OAAO,IAAME,QAAQ,GAAG,SAAXA,QAAW,CAACC,SAAD,EAAYC,KAAZ,EAAmBC,IAAnB,EAAyBC,KAAzB,EAAmC;AACzD,MAAMC,CAAC,GAAGrB,KAAK,CAACkB,KAAD,CAAf;AACA,MAAQI,wBAAR,GAAoEL,SAApE,CAAQK,wBAAR;AAAA,MAAkCC,aAAlC,GAAoEN,SAApE,CAAkCM,aAAlC;AAAA,MAAiDC,cAAjD,GAAoEP,SAApE,CAAiDO,cAAjD;AACA,MAAMC,GAAG,GAAG,CAAEJ,CAAC,CAACK,GAAF,KAAU,GAAX,GAAmBL,CAAC,CAACM,KAAF,KAAY,GAA/B,GAAuCN,CAAC,CAACO,IAAF,KAAW,GAAnD,IAA2D,IAAvE;AACA,SAAQH,GAAG,IAAIH,wBAAR,GAAqCH,IAAI,IAAII,aAA7C,GAA+DH,KAAK,IAAII,cAA/E;AACD,CALM;AAOP,OAAO,IAAMK,UAAU,GAAG,SAAbA,UAAa,CAACZ,SAAD,EAAYC,KAAZ;AAAA,MAAmBY,KAAnB,uEAA2B,CAA3B;AAAA,SACxB9B,KAAK,CAACkB,KAAK,IAAID,SAAS,CAACc,OAApB,CAAL,CAAkCC,GAAlC,CACEhC,KAAK,CAAC8B,KAAK,GAAG,CAAR,GAAYb,SAAS,CAACgB,KAAtB,GAA8BhB,SAAS,CAACiB,KAAzC,CADP,EAEEC,IAAI,CAACC,GAAL,CAASN,KAAT,IAAkBb,SAAS,CAACoB,oBAF9B,EAGEC,GAHF,EADwB;AAAA,CAAnB","sourcesContent":["import Color from 'color';\n\n// aka helpers\n\nexport const getDefined = (v, d) => v === undefined ? d : v;\n\nexport const getScreens = (breakpoints, size) => (\n  // ascending list of screens (\"active\" breakpoints)\n  Object.keys(breakpoints)\n    .sort((a, b) => (breakpoints[a] > breakpoints[b] ? 1 : -1))\n    .map(item => [item, breakpoints[item]])\n    .filter(item => item[1] <= size)\n    .map(item => item[0])\n);\n\nexport const colorYiq = (constants, color, dark, light) => {\n  const c = Color(color);\n  const { YIG_CONTRASTED_THRESHOLD, YIG_TEXT_DARK, YIG_TEXT_LIGHT } = constants;\n  const yiq = ((c.red() * 299) + (c.green() * 587) + (c.blue() * 114)) / 1000;\n  return (yiq >= YIG_CONTRASTED_THRESHOLD) ? (dark || YIG_TEXT_DARK) : (light || YIG_TEXT_LIGHT);\n};\n\nexport const colorLevel = (constants, color, level = 0) => (\n  Color(color || constants.PRIMARY).mix(\n    Color(level > 0 ? constants.BLACK : constants.WHITE),\n    Math.abs(level) * constants.THEME_COLOR_INTERVAL,\n  ).hex()\n);\n"]},"metadata":{},"sourceType":"module"}