{"ast":null,"code":"export var mixinMakeContainer = function mixinMakeContainer(constants) {\n  var gutter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return constants.ENABLE_GRID_CLASSES ? {\n    width: '100%',\n    flexDirection: 'column',\n    paddingRight: (gutter || constants.GRID_GUTTER_WIDTH) / 2,\n    paddingLeft: (gutter || constants.GRID_GUTTER_WIDTH) / 2,\n    marginRight: 'auto',\n    marginLeft: 'auto'\n  } : {};\n};\nexport var mixinMakeContainerMaxWidths = function mixinMakeContainerMaxWidths(constants) {\n  var screen = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return constants.ENABLE_GRID_CLASSES ? {\n    maxWidth: constants.CONTAINER_MAX_WIDTHS[screen || constants.SCREEN]\n  } : {};\n};\nexport var mixinMakeRow = function mixinMakeRow(constants) {\n  var gutter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return constants.ENABLE_GRID_CLASSES ? {\n    flexWrap: 'wrap',\n    marginRight: -(gutter || constants.GRID_GUTTER_WIDTH) / 2,\n    marginLeft: -(gutter || constants.GRID_GUTTER_WIDTH) / 2\n  } : {};\n};\nexport var mixinMakeCol = function mixinMakeCol(constants) {\n  var gutter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return constants.ENABLE_GRID_CLASSES ? {\n    flexDirection: 'column',\n    paddingRight: (gutter || constants.GRID_GUTTER_WIDTH) / 2,\n    paddingLeft: (gutter || constants.GRID_GUTTER_WIDTH) / 2,\n    minWidth: 0,\n    maxWidth: '100%'\n  } : {};\n};","map":{"version":3,"sources":["/Users/ashish/Downloads/covid kunal/node_modules/react-native-bootstrap-styles/src/mixins/grid.js"],"names":["mixinMakeContainer","constants","gutter","ENABLE_GRID_CLASSES","width","flexDirection","paddingRight","GRID_GUTTER_WIDTH","paddingLeft","marginRight","marginLeft","mixinMakeContainerMaxWidths","screen","maxWidth","CONTAINER_MAX_WIDTHS","SCREEN","mixinMakeRow","flexWrap","mixinMakeCol","minWidth"],"mappings":"AAEA,OAAO,IAAMA,kBAAkB,GAAG,SAArBA,kBAAqB,CAChCC,SADgC;AAAA,MAEhCC,MAFgC,uEAEvB,IAFuB;AAAA,SAG5BD,SAAS,CAACE,mBAAV,GAAgC;AACpCC,IAAAA,KAAK,EAAE,MAD6B;AAEpCC,IAAAA,aAAa,EAAE,QAFqB;AAGpCC,IAAAA,YAAY,EAAE,CAACJ,MAAM,IAAID,SAAS,CAACM,iBAArB,IAA0C,CAHpB;AAIpCC,IAAAA,WAAW,EAAE,CAACN,MAAM,IAAID,SAAS,CAACM,iBAArB,IAA0C,CAJnB;AAKpCE,IAAAA,WAAW,EAAE,MALuB;AAMpCC,IAAAA,UAAU,EAAE;AANwB,GAAhC,GAOF,EAV8B;AAAA,CAA3B;AAYP,OAAO,IAAMC,2BAA2B,GAAG,SAA9BA,2BAA8B,CACzCV,SADyC;AAAA,MAEzCW,MAFyC,uEAEhC,IAFgC;AAAA,SAGrCX,SAAS,CAACE,mBAAV,GAAgC;AACpCU,IAAAA,QAAQ,EAAEZ,SAAS,CAACa,oBAAV,CAA+BF,MAAM,IAAIX,SAAS,CAACc,MAAnD;AAD0B,GAAhC,GAEF,EALuC;AAAA,CAApC;AAOP,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAC1Bf,SAD0B;AAAA,MAE1BC,MAF0B,uEAEjB,IAFiB;AAAA,SAGtBD,SAAS,CAACE,mBAAV,GAAgC;AACpCc,IAAAA,QAAQ,EAAE,MAD0B;AAEpCR,IAAAA,WAAW,EAAE,EAAEP,MAAM,IAAID,SAAS,CAACM,iBAAtB,IAA2C,CAFpB;AAGpCG,IAAAA,UAAU,EAAE,EAAER,MAAM,IAAID,SAAS,CAACM,iBAAtB,IAA2C;AAHnB,GAAhC,GAIF,EAPwB;AAAA,CAArB;AAmBP,OAAO,IAAMW,YAAY,GAAG,SAAfA,YAAe,CAC1BjB,SAD0B;AAAA,MAE1BC,MAF0B,uEAEjB,IAFiB;AAAA,SAGtBD,SAAS,CAACE,mBAAV,GAAgC;AACpCE,IAAAA,aAAa,EAAE,QADqB;AAIpCC,IAAAA,YAAY,EAAE,CAACJ,MAAM,IAAID,SAAS,CAACM,iBAArB,IAA0C,CAJpB;AAKpCC,IAAAA,WAAW,EAAE,CAACN,MAAM,IAAID,SAAS,CAACM,iBAArB,IAA0C,CALnB;AAMpCY,IAAAA,QAAQ,EAAE,CAN0B;AAOpCN,IAAAA,QAAQ,EAAE;AAP0B,GAAhC,GAQF,EAXwB;AAAA,CAArB","sourcesContent":["// import { mixinBorderRadius } from './border-radius';\n\nexport const mixinMakeContainer = (\n  constants,\n  gutter = null,\n) => (constants.ENABLE_GRID_CLASSES ? {\n  width: '100%', // experimental\n  flexDirection: 'column',\n  paddingRight: (gutter || constants.GRID_GUTTER_WIDTH) / 2,\n  paddingLeft: (gutter || constants.GRID_GUTTER_WIDTH) / 2,\n  marginRight: 'auto', // experimental\n  marginLeft: 'auto', // experimental\n} : {});\n\nexport const mixinMakeContainerMaxWidths = (\n  constants,\n  screen = null,\n) => (constants.ENABLE_GRID_CLASSES ? {\n  maxWidth: constants.CONTAINER_MAX_WIDTHS[screen || constants.SCREEN],\n} : {});\n\nexport const mixinMakeRow = (\n  constants,\n  gutter = null,\n) => (constants.ENABLE_GRID_CLASSES ? {\n  flexWrap: 'wrap',\n  marginRight: -(gutter || constants.GRID_GUTTER_WIDTH) / 2,\n  marginLeft: -(gutter || constants.GRID_GUTTER_WIDTH) / 2,\n} : {});\n\n// RESERVED\n// export const mixinMakeColReady = (\n//   constants,\n//   gutter = null,\n// ) => (constants.ENABLE_GRID_CLASSES ? {\n//   paddingRight: (gutter || constants.GRID_GUTTER_WIDTH) / 2,\n//   paddingLeft: (gutter || constants.GRID_GUTTER_WIDTH) / 2,\n// } : {});\n\n// experimental\nexport const mixinMakeCol = (\n  constants,\n  gutter = null,\n) => (constants.ENABLE_GRID_CLASSES ? {\n  flexDirection: 'column', // critical / why? / TODO: document it\n  // OBSOLETED / flexBasis: 0, // harmful\n  // OBSOLETED / flexGrow: 1, // harmful\n  paddingRight: (gutter || constants.GRID_GUTTER_WIDTH) / 2,\n  paddingLeft: (gutter || constants.GRID_GUTTER_WIDTH) / 2,\n  minWidth: 0, // excessive?\n  maxWidth: '100%', // excessive?\n} : {});\n\n// RESERVED\n// @mixin make-col($size, $columns: $grid-columns) {\n//   flex: 0 0 percentage($size / $columns);\n//   // Add a `max-width` to ensure content within each column does not blow out\n//   // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari\n//   // do not appear to require this.\n//   max-width: percentage($size / $columns);\n// }\n\n// RESERVED\n// @mixin make-col-auto() {\n//   flex: 0 0 auto;\n//   width: auto;\n//   max-width: 100%; // Reset earlier grid tiers\n// }\n\n// SKIPPED\n// @mixin make-col-offset($size, $columns: $grid-columns) {\n//   $num: $size / $columns;\n//   margin-left: if($num == 0, 0, percentage($num));\n// }\n\n// SKIPPED\n// // Row columns\n// //\n// // Specify on a parent element(e.g., .row) to force immediate children into NN\n// // numberof columns. Supports wrapping to new lines, but does not do a Masonry\n// // style grid.\n// @mixin row-cols($count) {\n//   & > * {\n//     flex: 0 0 100% / $count;\n//     max-width: 100% / $count;\n//   }\n// }\n"]},"metadata":{},"sourceType":"module"}