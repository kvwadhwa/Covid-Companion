{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport Color from 'color';\nimport { mixinBorderRadius } from \"./border-radius\";\nimport { colorYiq } from \"./helpers\";\nexport var mixinButtonSize = function mixinButtonSize(constants, paddingY, paddingX, lineHeight, borderRadius) {\n  return _extends({\n    paddingHorizontal: paddingX,\n    paddingVertical: paddingY\n  }, mixinBorderRadius(constants, borderRadius));\n};\nexport var mixinButtonSizeText = function mixinButtonSizeText(constants, fontSize, lineHeight) {\n  return {\n    fontSize: fontSize,\n    lineHeight: lineHeight\n  };\n};\nexport var mixinButtonVariant = function mixinButtonVariant(constants, backgroundColor, borderColor) {\n  return {\n    backgroundColor: backgroundColor,\n    borderColor: borderColor\n  };\n};\nexport var mixinButtonVariantText = function mixinButtonVariantText(constants, backgroundColor) {\n  return {\n    color: colorYiq(constants, backgroundColor)\n  };\n};\nexport var mixinButtonVariantActive = function mixinButtonVariantActive(constants, backgroundColor, borderColor) {\n  return {\n    backgroundColor: Color(backgroundColor).darken(0.2).rgb().string(),\n    borderColor: Color(borderColor).darken(0.2).rgb().string()\n  };\n};\nexport var mixinButtonOutlineVariant = function mixinButtonOutlineVariant(constants, color) {\n  return {\n    borderColor: color\n  };\n};\nexport var mixinButtonOutlineVariantText = function mixinButtonOutlineVariantText(constants, color) {\n  return {\n    color: color\n  };\n};","map":{"version":3,"sources":["/Users/ashish/Downloads/covid kunal/node_modules/react-native-bootstrap-styles/src/mixins/buttons.js"],"names":["Color","mixinBorderRadius","colorYiq","mixinButtonSize","constants","paddingY","paddingX","lineHeight","borderRadius","paddingHorizontal","paddingVertical","mixinButtonSizeText","fontSize","mixinButtonVariant","backgroundColor","borderColor","mixinButtonVariantText","color","mixinButtonVariantActive","darken","rgb","string","mixinButtonOutlineVariant","mixinButtonOutlineVariantText"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,iBAAT;AACA,SAASC,QAAT;AAEA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAC7BC,SAD6B,EAE7BC,QAF6B,EAG7BC,QAH6B,EAI7BC,UAJ6B,EAK7BC,YAL6B;AAAA,SAMzB,SAAc;AAClBC,IAAAA,iBAAiB,EAAEH,QADD;AAElBI,IAAAA,eAAe,EAAEL;AAFC,GAAd,EAMJJ,iBAAiB,CAACG,SAAD,EAAYI,YAAZ,CANb,CANyB;AAAA,CAAxB;AAeP,OAAO,IAAMG,mBAAmB,GAAG,SAAtBA,mBAAsB,CACjCP,SADiC,EAEjCQ,QAFiC,EAGjCL,UAHiC;AAAA,SAI7B;AACJK,IAAAA,QAAQ,EAAEA,QADN;AAEJL,IAAAA,UAAU,EAAEA;AAFR,GAJ6B;AAAA,CAA5B;AASP,OAAO,IAAMM,kBAAkB,GAAG,SAArBA,kBAAqB,CAChCT,SADgC,EAEhCU,eAFgC,EAGhCC,WAHgC;AAAA,SAQ5B;AAEJD,IAAAA,eAAe,EAAEA,eAFb;AAGJC,IAAAA,WAAW,EAAEA;AAHT,GAR4B;AAAA,CAA3B;AAqDP,OAAO,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CACpCZ,SADoC,EAEpCU,eAFoC;AAAA,SAGhC;AACJG,IAAAA,KAAK,EAAEf,QAAQ,CAACE,SAAD,EAAYU,eAAZ;AADX,GAHgC;AAAA,CAA/B;AAOP,OAAO,IAAMI,wBAAwB,GAAG,SAA3BA,wBAA2B,CACtCd,SADsC,EAEtCU,eAFsC,EAGtCC,WAHsC;AAAA,SAIlC;AACJD,IAAAA,eAAe,EAAEd,KAAK,CAACc,eAAD,CAAL,CAAuBK,MAAvB,CAA8B,GAA9B,EAAmCC,GAAnC,GAAyCC,MAAzC,EADb;AAEJN,IAAAA,WAAW,EAAEf,KAAK,CAACe,WAAD,CAAL,CAAmBI,MAAnB,CAA0B,GAA1B,EAA+BC,GAA/B,GAAqCC,MAArC;AAFT,GAJkC;AAAA,CAAjC;AA2BP,OAAO,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B,CACvClB,SADuC,EAEvCa,KAFuC;AAAA,SAMnC;AAEJF,IAAAA,WAAW,EAAEE;AAFT,GANmC;AAAA,CAAlC;AAuCP,OAAO,IAAMM,6BAA6B,GAAG,SAAhCA,6BAAgC,CAC3CnB,SAD2C,EAE3Ca,KAF2C;AAAA,SAGvC;AACJA,IAAAA,KAAK,EAAEA;AADH,GAHuC;AAAA,CAAtC","sourcesContent":["import Color from 'color';\nimport { mixinBorderRadius } from './border-radius';\nimport { colorYiq } from './helpers';\n\nexport const mixinButtonSize = (\n  constants,\n  paddingY,\n  paddingX,\n  lineHeight,\n  borderRadius,\n) => (Object.assign({\n  paddingHorizontal: paddingX,\n  paddingVertical: paddingY,\n  // see mixinButtonSizeText / fontSize: fontSize,\n  // reserved / lineHeight: lineHeight,\n},\n  mixinBorderRadius(constants, borderRadius),\n));\n\nexport const mixinButtonSizeText = (\n  constants,\n  fontSize,\n  lineHeight,\n) => ({\n  fontSize: fontSize,\n  lineHeight: lineHeight,\n});\n\nexport const mixinButtonVariant = (\n  constants,\n  backgroundColor,\n  borderColor,\n  // hoverBackground,\n  // hoverColor,\n  // activeBackground,\n  // activeBorder,\n) => ({\n  // see mixinButtonVariantText / color: color-yiq($background);\n  backgroundColor: backgroundColor,\n  borderColor: borderColor,\n\n  // @include gradient-bg($background);\n\n  // @include hover {\n  //   color: color-yiq($hover-background);\n  //   @include gradient-bg($hover-background);\n  //   border-color: $hover-border;\n  // }\n\n  // &:focus,\n  // &.focus {\n  //   // Avoid using mixin so we can pass custom focus shadow properly\n  //   @if $enable-shadows {\n  //     box-shadow: $btn-box-shadow, 0 0 0 $btn-focus-width rgba($border, .5);\n  //   } @else {\n  //     box-shadow: 0 0 0 $btn-focus-width rgba($border, .5);\n  //   }\n  // }\n\n  // see mixinButtonVariantActive\n  // &:not(:disabled):not(.disabled):active,\n  // &:not(:disabled):not(.disabled).active,\n  // .show > &.dropdown-toggle {\n  //   color: color-yiq($active-background);\n  //   background-color: $active-background;\n  //   @if $enable-gradients {\n  //     background-image: none; // Remove the gradient for the pressed/active state\n  //   }\n  //   border-color: $active-border;\n\n  //   &:focus {\n  //     // Avoid using mixin so we can pass custom focus shadow properly\n  //     @if $enable-shadows {\n  //       box-shadow: $btn-active-box-shadow, 0 0 0 $btn-focus-width rgba($border, .5);\n  //     } @else {\n  //       box-shadow: 0 0 0 $btn-focus-width rgba($border, .5);\n  //     }\n  //   }\n  // }\n});\n\nexport const mixinButtonVariantText = (\n  constants,\n  backgroundColor,\n) => ({\n  color: colorYiq(constants, backgroundColor),\n});\n\nexport const mixinButtonVariantActive = (\n  constants,\n  backgroundColor,\n  borderColor,\n) => ({\n  backgroundColor: Color(backgroundColor).darken(0.2).rgb().string(), // see TouchableHighlight.activeOpacity\n  borderColor: Color(borderColor).darken(0.2).rgb().string(), // see TouchableHighlight.activeOpacity\n});\n\n// obsoleted\n// export const mixinButtonVariantDisabled = (\n//   constants,\n//   backgroundColor,\n//   borderColor,\n// ) => ({\n//   // see mixinButtonVariantText / color: color-yiq($background);\n//   backgroundColor: backgroundColor,\n//   borderColor: borderColor,\n//   // reserved\n//   // // Remove CSS gradients if they're enabled\n//   // @if $enable-gradients {\n//   //   background-image: none;\n//   // }\n// });\n\n// obsoleted / export const mixinButtonVariantDisabledText = mixinButtonVariantText;\n\nexport const mixinButtonOutlineVariant = (\n  constants,\n  color,\n  // colorHover,\n  // activeBackground,\n  // activeBorder,\n) => ({\n  // see mixinButtonOutlineVariantText / color: color;\n  borderColor: color,\n\n  // &:hover {\n  //   color: $color-hover;\n  //   background-color: $active-background;\n  //   border-color: $active-border;\n  // }\n\n  // &:focus,\n  // &.focus {\n  //   box-shadow: 0 0 0 $btn-focus-width rgba($color, .5);\n  // }\n\n  // &:not(:disabled):not(.disabled):active,\n  // &:not(:disabled):not(.disabled).active,\n  // .show > &.dropdown-toggle {\n  //   color: color-yiq($active-background);\n  //   background-color: $active-background;\n  //   border-color: $active-border;\n\n  //   &:focus {\n  //     // Avoid using mixin so we can pass custom focus shadow properly\n  //     @if $enable-shadows and $btn-active-box-shadow != none {\n  //       box-shadow: $btn-active-box-shadow, 0 0 0 $btn-focus-width rgba($color, .5);\n  //     } @else {\n  //       box-shadow: 0 0 0 $btn-focus-width rgba($color, .5);\n  //     }\n  //   }\n  // }\n});\n\nexport const mixinButtonOutlineVariantText = (\n  constants,\n  color,\n) => ({\n  color: color,\n});\n\n// obsoleted\n// export const mixinButtonOutlineVariantDisabled = (\n//   constants,\n// ) => ({\n//   backgroundColor: 'transparent',\n// });\n\n// obsoleted\n// export const mixinButtonOutlineVariantDisabledText = (\n//   constants,\n//   color,\n// ) => ({\n//   color: color,\n// });\n"]},"metadata":{},"sourceType":"module"}