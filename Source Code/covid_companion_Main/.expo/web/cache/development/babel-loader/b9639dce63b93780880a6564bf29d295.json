{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport { mixinMakeContainer, mixinMakeContainerMaxWidths } from \"./mixins/grid\";\nimport { mixinMakeRow, mixinMakeCol } from \"./mixins/grid\";\nimport { getScreens } from \"./mixins/helpers\";\nexport default function getClasses(constants, classes) {\n  var ENABLE_GRID_CLASSES = constants.ENABLE_GRID_CLASSES,\n      GRID_BREAKPOINTS = constants.GRID_BREAKPOINTS,\n      GRID_COLUMNS = constants.GRID_COLUMNS,\n      GRID_GUTTER_WIDTH = constants.GRID_GUTTER_WIDTH,\n      SCREENS_INFIXES = constants.SCREENS_INFIXES;\n\n  var _classes = ENABLE_GRID_CLASSES ? {\n    containerFluid: _extends({}, mixinMakeContainer(constants)),\n    noGutters: {\n      marginRight: 0,\n      marginLeft: 0\n    },\n    noGuttersCol: {\n      paddingRight: 0,\n      paddingLeft: 0\n    },\n    Gutters: {\n      marginRight: -GRID_GUTTER_WIDTH / 2,\n      marginLeft: -GRID_GUTTER_WIDTH / 2\n    },\n    GuttersCol: {\n      paddingRight: GRID_GUTTER_WIDTH / 2,\n      paddingLeft: GRID_GUTTER_WIDTH / 2\n    }\n  } : {};\n\n  if (ENABLE_GRID_CLASSES) {\n    SCREENS_INFIXES.forEach(function (item) {\n      _classes['container' + item] = _extends({}, mixinMakeContainer(constants), mixinMakeContainerMaxWidths(constants, item));\n    });\n  }\n\n  if (ENABLE_GRID_CLASSES) {\n    var SCREENS_INFIXES_ALL = [''].concat(Object.keys(GRID_BREAKPOINTS));\n    var gridColumnsArray = Array.from(Array(GRID_COLUMNS).keys());\n    SCREENS_INFIXES_ALL.forEach(function (itemScreen) {\n      _classes['row' + itemScreen] = _extends(mixinMakeRow(constants), SCREENS_INFIXES.indexOf(itemScreen) > -1 ? {\n        flexDirection: 'row'\n      } : {});\n    });\n    SCREENS_INFIXES_ALL.forEach(function (itemScreen) {\n      GRID_COLUMNS && gridColumnsArray.forEach(function (item) {\n        _classes['col' + itemScreen + (item || '')] = _extends(mixinMakeCol(constants), SCREENS_INFIXES.indexOf(itemScreen) > -1 ? {\n          flex: item || 1\n        } : {});\n      });\n    });\n  }\n\n  return _classes;\n}\n;","map":{"version":3,"sources":["/Users/ashish/Downloads/covid kunal/node_modules/react-native-bootstrap-styles/src/grid.js"],"names":["mixinMakeContainer","mixinMakeContainerMaxWidths","mixinMakeRow","mixinMakeCol","getScreens","getClasses","constants","classes","ENABLE_GRID_CLASSES","GRID_BREAKPOINTS","GRID_COLUMNS","GRID_GUTTER_WIDTH","SCREENS_INFIXES","_classes","containerFluid","noGutters","marginRight","marginLeft","noGuttersCol","paddingRight","paddingLeft","Gutters","GuttersCol","forEach","item","SCREENS_INFIXES_ALL","concat","Object","keys","gridColumnsArray","Array","from","itemScreen","indexOf","flexDirection","flex"],"mappings":";AAAA,SAASA,kBAAT,EAA6BC,2BAA7B;AACA,SAASC,YAAT,EAAuBC,YAAvB;AACA,SAASC,UAAT;AAEA,eAAe,SAASC,UAAT,CAAoBC,SAApB,EAA+BC,OAA/B,EAAwC;AACrD,MACEC,mBADF,GAOIF,SAPJ,CACEE,mBADF;AAAA,MAEEC,gBAFF,GAOIH,SAPJ,CAEEG,gBAFF;AAAA,MAGEC,YAHF,GAOIJ,SAPJ,CAGEI,YAHF;AAAA,MAIEC,iBAJF,GAOIL,SAPJ,CAIEK,iBAJF;AAAA,MAKEC,eALF,GAOIN,SAPJ,CAKEM,eALF;;AASA,MAAMC,QAAQ,GAAGL,mBAAmB,GAAG;AAQrCM,IAAAA,cAAc,EAAE,SAAc,EAAd,EACdd,kBAAkB,CAACM,SAAD,CADJ,CARqB;AAYrCS,IAAAA,SAAS,EAAE;AACTC,MAAAA,WAAW,EAAE,CADJ;AAETC,MAAAA,UAAU,EAAE;AAFH,KAZ0B;AAiBrCC,IAAAA,YAAY,EAAE;AACZC,MAAAA,YAAY,EAAE,CADF;AAEZC,MAAAA,WAAW,EAAE;AAFD,KAjBuB;AAuBrCC,IAAAA,OAAO,EAAE;AACPL,MAAAA,WAAW,EAAE,CAACL,iBAAD,GAAqB,CAD3B;AAEPM,MAAAA,UAAU,EAAE,CAACN,iBAAD,GAAqB;AAF1B,KAvB4B;AA6BrCW,IAAAA,UAAU,EAAE;AACVH,MAAAA,YAAY,EAAER,iBAAiB,GAAG,CADxB;AAEVS,MAAAA,WAAW,EAAET,iBAAiB,GAAG;AAFvB;AA7ByB,GAAH,GAiChC,EAjCJ;;AAoCA,MAAIH,mBAAJ,EAAyB;AACvBI,IAAAA,eAAe,CAACW,OAAhB,CAAwB,UAACC,IAAD,EAAU;AAChCX,MAAAA,QAAQ,CAAC,cAAcW,IAAf,CAAR,GAA+B,SAAc,EAAd,EAC7BxB,kBAAkB,CAACM,SAAD,CADW,EAE7BL,2BAA2B,CAACK,SAAD,EAAYkB,IAAZ,CAFE,CAA/B;AAID,KALD;AAMD;;AAED,MAAIhB,mBAAJ,EAAyB;AACvB,QAAMiB,mBAAmB,GAAG,CAAC,EAAD,EAAKC,MAAL,CAAYC,MAAM,CAACC,IAAP,CAAYnB,gBAAZ,CAAZ,CAA5B;AACA,QAAMoB,gBAAgB,GAAGC,KAAK,CAACC,IAAN,CAAWD,KAAK,CAACpB,YAAD,CAAL,CAAoBkB,IAApB,EAAX,CAAzB;AAEAH,IAAAA,mBAAmB,CAACF,OAApB,CAA4B,UAACS,UAAD,EAAgB;AAC1CnB,MAAAA,QAAQ,CAAC,QAAQmB,UAAT,CAAR,GAA+B,SAAc9B,YAAY,CAACI,SAAD,CAA1B,EAC7BM,eAAe,CAACqB,OAAhB,CAAwBD,UAAxB,IAAsC,CAAC,CAAvC,GAA2C;AACzCE,QAAAA,aAAa,EAAE;AAD0B,OAA3C,GAGI,EAJyB,CAA/B;AAMD,KAPD;AASAT,IAAAA,mBAAmB,CAACF,OAApB,CAA4B,UAACS,UAAD,EAAgB;AAC1CtB,MAAAA,YAAY,IAAImB,gBAAgB,CAACN,OAAjB,CAAyB,UAAAC,IAAI,EAAI;AAC/CX,QAAAA,QAAQ,CAAC,QAAQmB,UAAR,IAAsBR,IAAI,IAAI,EAA9B,CAAD,CAAR,GAA8C,SAAcrB,YAAY,CAACG,SAAD,CAA1B,EAC5CM,eAAe,CAACqB,OAAhB,CAAwBD,UAAxB,IAAsC,CAAC,CAAvC,GAA2C;AACzCG,UAAAA,IAAI,EAAEX,IAAI,IAAI;AAD2B,SAA3C,GAGI,EAJwC,CAA9C;AAMD,OAPe,CAAhB;AAWD,KAZD;AAyBD;;AAED,SAAOX,QAAP;AACD;AAAA","sourcesContent":["import { mixinMakeContainer, mixinMakeContainerMaxWidths } from './mixins/grid';\nimport { mixinMakeRow, mixinMakeCol } from './mixins/grid';\nimport { getScreens } from './mixins/helpers';\n\nexport default function getClasses(constants, classes) {\n  const {\n    ENABLE_GRID_CLASSES,\n    GRID_BREAKPOINTS,\n    GRID_COLUMNS,\n    GRID_GUTTER_WIDTH,\n    SCREENS_INFIXES,\n    // OBSOLETED / SCREEN,\n  } = constants;\n\n  const _classes = ENABLE_GRID_CLASSES ? {\n\n    // TODO: add later\n    // container: Object.assign({},\n    //   mixinMakeContainer(constants),\n    //   mixinMakeContainerMaxWidths(constants),\n    // ),\n\n    containerFluid: Object.assign({},\n      mixinMakeContainer(constants),\n    ),\n\n    noGutters: {\n      marginRight: 0,\n      marginLeft: 0,\n    },\n\n    noGuttersCol: {\n      paddingRight: 0,\n      paddingLeft: 0,\n    },\n\n    // experimental / in use\n    Gutters: {\n      marginRight: -GRID_GUTTER_WIDTH / 2,\n      marginLeft: -GRID_GUTTER_WIDTH / 2,\n    },\n\n    // experimental / in use\n    GuttersCol: {\n      paddingRight: GRID_GUTTER_WIDTH / 2,\n      paddingLeft: GRID_GUTTER_WIDTH / 2,\n    },\n  } : {};\n\n  // container%screen / ex: containerMd\n  if (ENABLE_GRID_CLASSES) {\n    SCREENS_INFIXES.forEach((item) => {\n      _classes['container' + item] = Object.assign({},\n        mixinMakeContainer(constants),\n        mixinMakeContainerMaxWidths(constants, item),\n      );\n    });\n  }\n\n  if (ENABLE_GRID_CLASSES) {\n    const SCREENS_INFIXES_ALL = [''].concat(Object.keys(GRID_BREAKPOINTS));\n    const gridColumnsArray = Array.from(Array(GRID_COLUMNS).keys());\n\n    SCREENS_INFIXES_ALL.forEach((itemScreen) => {\n      _classes['row' + itemScreen] = Object.assign(mixinMakeRow(constants),\n        SCREENS_INFIXES.indexOf(itemScreen) > -1 ? { // dirty\n          flexDirection: 'row',\n          // more?\n        } : {}\n      );\n    });\n\n    SCREENS_INFIXES_ALL.forEach((itemScreen) => {\n      GRID_COLUMNS && gridColumnsArray.forEach(item => {\n        _classes['col' + itemScreen + (item || '')] = Object.assign(mixinMakeCol(constants),\n          SCREENS_INFIXES.indexOf(itemScreen) > -1 ? { // dirty\n            flex: item || 1,\n            // more?\n          } : {}\n        );\n      });\n\n      // SKIPPED\n      // _classes['col' + itemScreen + 'Auto'] = mixinMakeCol(constants);\n    });\n\n    // Row columns\n    // .row-cols-*\n    // SKIPPED\n\n    // Offsetting columns\n    // .offset-*-*\n    // SKIPPED\n\n    // Reordering\n    // .order-*-*\n    // SKIPPED\n  }\n\n  return _classes;\n};\n"]},"metadata":{},"sourceType":"module"}